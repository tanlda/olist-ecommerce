global: { }

nameOverride: ""
fullnameOverride: ""

master:
  affinity: &masterAffinity
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/role
                operator: In
                values:
                  - master

  selector: &masterSelector
    kubernetes.io/hostname: master

  volume: &masterVolume
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/role
              operator: In
              values:
                - master


worker:
  affinity: &workerAffinity
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 50
          preference:
            matchExpressions:
              - key: kubernetes.io/role
                operator: In
                values:
                  - worker
        - weight: 10
          preference:
            matchExpressions:
              - key: kubernetes.io/role
                operator: In
                values:
                  - master

stackgres:
  users:
    superuser:
      username:
        name: stackgres-secret
        key: superuser-username
      password:
        name: stackgres-secret
        key: superuser-password
    replication:
      username:
        name: stackgres-secret
        key: replication-username
      password:
        name: stackgres-secret
        key: replication-password
    authenticator:
      username:
        name: stackgres-secret
        key: authenticator-username
      password:
        name: stackgres-secret
        key: authenticator-password

storage:
  enabled: true
  fullnameOverride: storage
  defaultBuckets: ecommerce

  affinity:
    *masterAffinity

  resources:
    requests:
      cpu: 0.5
      memory: 512Mi
    limits:
      cpu: 2
      memory: 4096Mi

  auth:
    rootUser: admin
    rootPassword: password

  extraEnvVars:
    - name: MINIO_LOG_LEVEL
      value: DEBUG

  service:
    type: LoadBalancer
    ports:
      api: 80

  persistence:
    size: 8Gi
    storageClass: storage
    existingClaim: storage-pvc-0
    mountPath: /minio/data

lakehouse:
  enabled: true
  fullnameOverride: lakehouse
  defaultBuckets: ecommerce

  affinity:
    *masterAffinity

  resources:
    requests:
      cpu: 0.5
      memory: 512Mi
    limits:
      cpu: 2
      memory: 4096Mi

  auth:
    rootUser: admin
    rootPassword: password

  extraEnvVars:
    - name: MINIO_LOG_LEVEL
      value: DEBUG

  service:
    type: LoadBalancer
    ports:
      api: 80

  persistence:
    size: 8Gi
    storageClass: lakehouse
    existingClaim: lakehouse-pvc-0
    mountPath: /minio/data

iceberg:
  instances: 1

database:
  instance: 1

warehouse:
  instances: 2

opensearch:
  enabled: true

  replicas: 1

  nodeSelector:
    *masterSelector

  persistence:
    size: 8Gi
    enabled: true
    storageClass: opensearch

  config:
    opensearch.yml: |
      network.host: 0.0.0.0
      cluster.name: opensearch-cluster

  extraEnvs:
    - name: DISABLE_INSTALL_DEMO_CONFIG
      value: "true"
    - name: DISABLE_SECURITY_PLUGIN
      value: "true"
    - name: OPENSEARCH_INITIAL_ADMIN_PASSWORD
      value: Opensearch_0

  extraInitContainers:
    - name: sysctl
      image: docker.io/bitnami/bitnami-shell:10-debian-10-r199
      imagePullPolicy: "IfNotPresent"
      command:
        - /bin/bash
        - -ec
        - |
          CURRENT=`sysctl -n vm.max_map_count`;
          DESIRED="262144";
          if [ "$DESIRED" -gt "$CURRENT" ]; then
              sysctl -w vm.max_map_count=262144;
          fi;
          CURRENT=`sysctl -n fs.file-max`;
          DESIRED="65536";
          if [ "$DESIRED" -gt "$CURRENT" ]; then
              sysctl -w fs.file-max=65536;
          fi;
      securityContext:
        runAsUser: 0
        privileged: true

document:
  enabled: true
  fullnameOverride: document

  architecture: replicaset
  replicaCount: 2

  affinity:
    *masterAffinity

  auth:
    rootUser: admin
    rootPassword: password
    replicaSetKey: replica
    existingSecret: mongodb

  service:
    type: LoadBalancer

  persistence:
    size: 4Gi
    storageClass: document
    existingClaim: document-pvc-0

notebook:
  aws:
    credentials: |
      [default]
      aws_access_key_id =
      aws_secret_access_key =
    config: |
      [default]
      region =
  service:
    host: 192.168.1.88
