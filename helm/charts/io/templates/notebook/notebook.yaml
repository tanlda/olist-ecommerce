apiVersion: v1
kind: PersistentVolume
metadata:
  name: notebook-pv
spec:
  storageClassName: local
  accessModes: [ "ReadWriteMany" ]
  capacity:
    storage: 8Gi
  volumeMode: Filesystem
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /kube/ecommerce/io/notebook
  nodeAffinity:
{{ .Values.master.volume | toYaml | nindent 4 }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: notebook-pvc
  namespace: {{ .Release.Namespace }}
spec:
  storageClassName: local
  accessModes: [ "ReadWriteMany" ]
  resources:
    requests:
      storage: 8Gi
  volumeName: notebook-pv
---
apiVersion: v1
kind: Secret
metadata:
  name: notebook-aws
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  credentials: {{ .Values.notebook.aws.credentials | b64enc }}
  config: {{ .Values.notebook.aws.config | b64enc }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notebook
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notebook
  template:
    metadata:
      labels:
        app: notebook
    spec:
      containers:
        - name: notebook
          image: registry.io/notebook:spark
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /home/jovyan/work
              name: notebook
            - mountPath: /home/jovyan/.aws
              name: aws
          ports:
            - containerPort: 8888
      volumes:
        - name: notebook
          persistentVolumeClaim:
            claimName: notebook-pvc
        - name: aws
          secret:
            secretName: notebook-aws
      affinity:
{{ .Values.master.volume | toYaml | nindent 8 }}
---
apiVersion: v1
kind: Service
metadata:
  name: notebook
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: notebook
  type: LoadBalancer
  loadBalancerIP: {{ .Values.notebook.service.host }}
  ports:
    - name: jupyter
      port: 80
      targetPort: 8888
    - name: spark
      port: 4040
      targetPort: 4040
---
kind: Service
apiVersion: v1
metadata:
  name: notebook-headless
  namespace: {{ .Release.Namespace }}
spec:
  clusterIP: None
  selector:
    app: notebook
